package problems

import (
    "math/big"
    "strconv"
)

type problem0029 struct {
    id int
    description string
}

func (p problem0029) ID() int {
    return p.id
}

func (p problem0029) Description() string {
    return p.description
}

func (p problem0029) Solve() string {
    const limit = 101

    sequence := make([]big.Int, 0, limit*limit)

    for i := int64(2); i < limit; i++ {
        for j := int64(2); j < limit; j++ {
            a := big.NewInt(i)
            b := big.NewInt(j)

            z := new(big.Int).Exp(a, b, nil)

            found := false

            for _, item := range sequence {
                if z.Cmp(&item) == 0 {
                    found = true
                    break
                }
            }

            if !found {
                sequence = append(sequence, *z)
            }
        }
    }

    return strconv.Itoa(len(sequence))
}

func init() {
    Registry[29] = problem0029{29, "How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?"}
}
